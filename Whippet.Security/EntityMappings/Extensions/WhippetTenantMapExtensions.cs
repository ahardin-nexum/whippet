using System;
using NHibernate;
using Athi.Whippet.Data;
using Athi.Whippet.Security.EntityMappings.Tenants;

namespace Athi.Whippet.Security.EntityMappings.Extensions
{
    /// <summary>
    /// Provides extension methods to <see cref="WhippetTenantMap"/> objects. This class cannot be inherited.
    /// </summary>
    public static class WhippetTenantMapExtensions
    {
        /// <summary>
        /// Creates an <see cref="ISQLQuery"/> object that updates the root tenant ID.
        /// </summary>
        /// <param name="map"><see cref="WhippetTenantMap"/> object.</param>
        /// <param name="session"><see cref="ISession"/> object that represents the current context.</param>
        /// <param name="fluentGeneratedId">ID that was generated by Fluent when the original record was inserted.</param>
        /// <param name="systemId">ID to assign to the existing record.</param>
        /// <param name="idColumn">ID column of the entity.</param>
        /// <returns><see cref="ISQLQuery"/> object to execute.</returns>
        public static ISQLQuery CreateUpdateNonInteractiveTenantQuery(this WhippetTenantMap map, ISession session, Guid fluentGeneratedId, Guid systemId, string idColumn = nameof(WhippetEntity.ID))
        {
            if (map == null)
            {
                throw new ArgumentNullException(nameof(map));
            }
            else if (session == null)
            {
                throw new ArgumentNullException(nameof(session));
            }
            else
            {
                return session.CreateSQLQuery("UPDATE " + map.FullyQualifiedTableName + " SET " + idColumn + "='" + systemId.ToString() + "' WHERE " + idColumn + "='" + fluentGeneratedId + "'");
            }
        }
    }
}

