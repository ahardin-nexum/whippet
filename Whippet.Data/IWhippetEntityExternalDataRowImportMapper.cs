using System;
using System.Collections.Generic;
using System.Data;

namespace Athi.Whippet.Data
{
    /// <summary>
    /// Allows for <see cref="IWhippetEntity"/> objects to be constructed using external data from a non-mapped datasource, such as an external server, file, or stream, using a <see cref="DataRow"/>.
    /// </summary>
    public interface IWhippetEntityExternalDataRowImportMapper : IWhippetEntity
    {
        /// <summary>
        /// Gets the internal <see cref="WhippetDataRowImportMap"/> object. This property is read-only.
        /// </summary>
        WhippetDataRowImportMap ImportMap
        { get; }

        /// <summary>
        /// Gets the external table name or <see langword="null"/> if the data source is not stored in a database. This property is read-only.
        /// </summary>
        string ExternalTableName
        { get; }

        /// <summary>
        /// Creates a <see cref="WhippetDataRowImportMap"/> object that contains a mapping for the current entity.
        /// </summary>
        /// <returns><see cref="WhippetDataRowImportMap"/> object.</returns>
        WhippetDataRowImportMap CreateImportMap();

        /// <summary>
        /// Imports the specified <see cref="DataRow"/> containing the information needed to populate the <see cref="IWhippetEntity"/>.
        /// </summary>
        /// <param name="dataRow"><see cref="DataRow"/> containing the data to import.</param>
        /// <param name="importMap">External <see cref="WhippetDataRowImportMap"/>. If <see langword="null"/>, then the one generated by <see cref="CreateImportMap"/> will be used.</param>
        /// <exception cref="ArgumentNullException" />
        void ImportDataRow(DataRow dataRow, WhippetDataRowImportMap importMap = null);

        /// <summary>
        /// Creates a <see cref="DataTable"/> that represents the database table of the current entity.
        /// </summary>
        /// <returns><see cref="DataTable"/> containing the columns and respective definitions of the associated external database table for the current entity.</returns>
        DataTable CreateDataTable();

        /// <summary>
        /// Creates a new <see cref="DataRow"/> that represents the current entity's state.
        /// </summary>
        /// <returns><see cref="DataRow"/> object containing the values of the current entity.</returns>
        DataRow CreateDataRow();
    }
}
