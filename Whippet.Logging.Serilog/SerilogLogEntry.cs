using System;
using Athi.Whippet.Data;
using Athi.Whippet.Json.Newtonsoft.Extensions;

namespace Athi.Whippet.Logging.Serilog
{
    /// <summary>
    /// Represents a log entry generated by Serilog.
    /// </summary>
    public class SerilogLogEntry : WhippetEntity, ISerilogLogEntry, IEqualityComparer<ISerilogLogEntry>, IWhippetEntity
    {
        /// <summary>
        /// Gets or sets the unique ID of the <see cref="SerilogLogEntry"/>.
        /// </summary>
        public new virtual int ID
        { get; set; }

        /// <summary>
        /// Gets or sets the log message that was generated.
        /// </summary>
        public virtual string Message
        { get; set; }

        /// <summary>
        /// Gets or sets the message template used by Serilog to enrich the message.
        /// </summary>
        public virtual string MessageTemplate
        { get; set; }

        /// <summary>
        /// Gets or sets the severity level of the log entry.
        /// </summary>
        public virtual SerilogLevel? Level
        { get; set; }

        /// <summary>
        /// Gets or sets the timestamp of the log. All entries are respective to the date/time of the server the event was captured on.
        /// </summary>
        public virtual DateTime? TimeStamp
        { get; set; }

        /// <summary>
        /// Gets or sets the exception message that was captured.
        /// </summary>
        public virtual string Exception
        { get; set; }

        /// <summary>
        /// Gets or sets an XML document that contains the properties that are mapped to <see cref="MessageTemplate"/>.
        /// </summary>
        public virtual string Properties
        { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogLogEntry"/> class with no arguments.
        /// </summary>
        public SerilogLogEntry()
            : base()
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogLogEntry"/> class with the specified ID.
        /// </summary>
        /// <param name="id">ID of the log entry.</param>
        public SerilogLogEntry(int id)
            : this()
        {
            ID = id;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SerilogLogEntry"/> class with the specified parameters.
        /// </summary>
        /// <param name="id">ID of the log entry.</param>
        /// <param name="message">Log message that was generated.</param>
        /// <param name="messageTemplate">Message template used by Serilog to enrich the message.</param>
        /// <param name="level">Severity level of the log entry.</param>
        /// <param name="timestamp">Timestamp of the log. All date/time values are respective to the server the event was captured on.</param>
        /// <param name="exception">Exception message that was captured.</param>
        /// <param name="properties">XML document that contains the properties that are mapped to <paramref name="messageTemplate"/>.</param>
        public SerilogLogEntry(int id, string message, string messageTemplate, SerilogLevel? level, DateTime? timestamp, string exception, string properties)
            : this(id)
        {
            Message = message;
            MessageTemplate = messageTemplate;
            Level = level;
            TimeStamp = timestamp;
            Exception = exception;
            Properties = properties;
        }

        /// <summary>
        /// Compares the current instance to the specified object for equality.
        /// </summary>
        /// <param name="obj">Object to compare against.</param>
        /// <returns><see langword="true"/> if the objects are equal; otherwise, <see langword="false"/>.</returns>
        public override bool Equals(object obj)
        {
            return Equals(obj as ISerilogLogEntry);
        }

        /// <summary>
        /// Compares the current instance to the specified object for equality.
        /// </summary>
        /// <param name="obj">Object to compare against.</param>
        /// <returns><see langword="true"/> if the objects are equal; otherwise, <see langword="false"/>.</returns>
        public virtual bool Equals(ISerilogLogEntry obj)
        {
            return (obj == null) ? false : Equals(this, obj);
        }

        /// <summary>
        /// Compares the two objects for equality.
        /// </summary>
        /// <param name="a">First object to compare.</param>
        /// <param name="b">Second object to compare.</param>
        /// <returns><see langword="true"/> if the objects are equal; otherwise, <see langword="false"/>.</returns>
        public virtual bool Equals(ISerilogLogEntry a, ISerilogLogEntry b)
        {
            bool equals = (a == null && b == null);

            if (!equals && (a != null) && (b != null))
            {
                equals = String.Equals(a.Exception, b.Exception, StringComparison.InvariantCultureIgnoreCase)
                    && a.Level.GetValueOrDefault().Equals(b.Level.GetValueOrDefault())
                    && String.Equals(a.Message, b.Message, StringComparison.InvariantCultureIgnoreCase)
                    && String.Equals(a.MessageTemplate, b.MessageTemplate, StringComparison.InvariantCultureIgnoreCase)
                    && String.Equals(a.Properties, b.Properties, StringComparison.InvariantCultureIgnoreCase)
                    && a.TimeStamp.GetValueOrDefault().Equals(b.TimeStamp.GetValueOrDefault());
            }

            return equals;
        }

        /// <summary>
        /// Gets the hash code for the current object.
        /// </summary>
        /// <returns>Hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Gets the hash code for the specified object.
        /// </summary>
        /// <param name="obj">Object to get hash code for.</param>
        /// <returns>Hash code for the specified object.</returns>
        /// <exception cref="ArgumentNullException"></exception>
        public virtual int GetHashCode(ISerilogLogEntry obj)
        {
            if (obj == null)
            {
                throw new ArgumentNullException(nameof(obj));
            }
            else
            {
                return obj.GetHashCode();
            }
        }

        /// <summary>
        /// Gets the string representation of the current object.
        /// </summary>
        /// <returns>String representation of the current object.</returns>
        public override string ToString()
        {
            return TimeStamp.GetValueOrDefault().ToString() + " [" + Level.GetValueOrDefault().ToString() + "]";
        }
    }
}
