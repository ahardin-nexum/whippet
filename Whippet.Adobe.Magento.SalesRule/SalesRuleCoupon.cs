using System;
using NodaTime;
using Athi.Whippet.Adobe.Magento.Data;
using Athi.Whippet.Adobe.Magento.SalesRule.Extensions;
using Athi.Whippet.Json.Newtonsoft.Extensions;

namespace Athi.Whippet.Adobe.Magento.SalesRule
{
    /// <summary>
    /// Represents a coupon that can be applied to an order or item in Magento.
    /// </summary>
    public class SalesRuleCoupon : MagentoEntity, IMagentoEntity, ISalesRuleCoupon, IEqualityComparer<ISalesRuleCoupon>
    {
        private SalesRule _rule;

        /// <summary>
        /// Gets or sets the unique ID of the <see cref="SalesRuleCoupon"/>.
        /// </summary>
        public virtual uint CouponID
        {
            get
            {
                return base.ID;
            }
            set
            {
                base.ID = value;
            }
        }

        /// <summary>
        /// Gets or sets the parent <see cref="SalesRule"/> that the coupon is associated with.
        /// </summary>
        public virtual SalesRule Rule
        {
            get
            {
                if (_rule == null)
                {
                    _rule = new SalesRule();
                }

                return _rule;
            }
            set
            {
                _rule = value;
            }
        }

        public virtual uint RuleID
        {
            get
            {
                return Rule.ID;
            }
            set
            {
                Rule.ID = value;
            }
        }

        /// <summary>
        /// Gets or sets the parent <see cref="ISalesRule"/> that the coupon is associated with.
        /// </summary>
        ISalesRule ISalesRuleCoupon.Rule
        {
            get
            {
                return Rule;
            }
            set
            {
                Rule = value?.ToSalesRule();
            }
        }

        /// <summary>
        /// Gets or sets the coupon code.
        /// </summary>
        public virtual string Code
        { get; set; }

        /// <summary>
        /// Specifies the maximum amount of times the coupon can be used.
        /// </summary>
        public virtual uint? UsageLimit
        { get; set; }

        /// <summary>
        /// Specifies the maximum amount of times the coupon can be used per individual customer.
        /// </summary>
        public virtual uint? UsagePerCustomerLimit
        { get; set; }

        /// <summary>
        /// Represents a total number of instances the coupon was applied.
        /// </summary>
        public virtual uint TimesUsed
        { get; set; }

        /// <summary>
        /// Gets or sets the date the coupon is no longer valid.
        /// </summary>
        public virtual Instant? ExpirationDate
        { get; set; }

        /// <summary>
        /// Indicates whether the coupon is a primary coupon and should take precedence over other applied coupons on an order.
        /// </summary>
        public virtual bool IsPrimary
        { get; set; }

        /// <summary>
        /// Gets or sets the date/time the entry was created.
        /// </summary>
        public virtual Instant? CreatedAt
        { get; set; }

        /// <summary>
        /// Gets or sets the coupon type code.
        /// </summary>
        public virtual short? Type
        { get; set; }

        /// <summary>
        /// Indicates whether the coupon was generated by DotMailer.
        /// </summary>
        public virtual bool? GeneratedByDotMailer
        {
            get
            {
                bool? _val = null;

                if (GeneratedByDotMailerIndicator.HasValue)
                {
                    _val = (GeneratedByDotMailerIndicator.Value == 1);
                }

                return _val;
            }
            set
            {
                if (value.HasValue)
                {
                    GeneratedByDotMailerIndicator = (value.Value ? new short?(1) : new short?(0));
                }
                else
                {
                    GeneratedByDotMailerIndicator = null;
                }
            }
        }

        /// <summary>
        /// Indicates whether the coupon was generated by DotMailer. A value other than one (1) is <see langword="false"/>.
        /// </summary>
        internal protected virtual short? GeneratedByDotMailerIndicator
        { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesRuleCoupon"/> class with no arguments.
        /// </summary>
        public SalesRuleCoupon()
        { }

        /// <summary>
        /// Initializes a new instance of the <see cref="SalesRuleCoupon"/> class with the specified rule ID and <see cref="MagentoServer"/>.
        /// </summary>
        /// <param name="ruleId">Rule ID.</param>
        /// <param name="server"><see cref="MagentoServer"/> the entity resides on.</param>
        public SalesRuleCoupon(uint ruleId, MagentoServer server)
            : base(ruleId, server)
        { }

        /// <summary>
        /// Compares the current instance to the specified object for equality.
        /// </summary>
        /// <param name="obj">Object to compare against.</param>
        /// <returns><see langword="true"/> if the objects are equal; otherwise, <see langword="false"/>.</returns>
        public override bool Equals(object? obj)
        {
            return (obj == null || !(obj is ISalesRuleCoupon)) ? false : Equals(obj as ISalesRuleCoupon);
        }

        /// <summary>
        /// Compares the current instance to the specified object for equality.
        /// </summary>
        /// <param name="obj">Object to compare against.</param>
        /// <returns><see langword="true"/> if the objects are equal; otherwise, <see langword="false"/>.</returns>
        public virtual bool Equals(ISalesRuleCoupon obj)
        {
            return (obj == null) ? false : Equals(this, obj);
        }

        /// <summary>
        /// Compares the two objects for equality.
        /// </summary>
        /// <param name="x">First object to compare.</param>
        /// <param name="y">Second object to compare.</param>
        /// <returns><see langword="true"/> if the objects are equal; otherwise, <see langword="false"/>.</returns>
        public virtual bool Equals(ISalesRuleCoupon x, ISalesRuleCoupon y)
        {
            bool equals = (x == null && y == null);

            if (!equals && (x != null) && (y != null))
            {
                equals = String.Equals(x.Code, y.Code, StringComparison.InvariantCultureIgnoreCase)
                    && x.CouponID == y.CouponID
                    && x.CreatedAt.GetValueOrDefault().Equals(y.CreatedAt.GetValueOrDefault())
                    && x.ExpirationDate.GetValueOrDefault().Equals(y.ExpirationDate.GetValueOrDefault())
                    && x.GeneratedByDotMailer.GetValueOrDefault().Equals(y.GeneratedByDotMailer.GetValueOrDefault())
                    && x.ID == y.ID
                    && x.IsPrimary == y.IsPrimary
                    && ((x.Rule == null && y.Rule == null) || (x.Rule != null && x.Rule.Equals(y.Rule)))
                    && x.TimesUsed == y.TimesUsed
                    && x.Type.GetValueOrDefault().Equals(y.Type.GetValueOrDefault())
                    && x.UsageLimit.GetValueOrDefault().Equals(y.UsageLimit.GetValueOrDefault())
                    && x.UsagePerCustomerLimit.GetValueOrDefault().Equals(y.UsagePerCustomerLimit.GetValueOrDefault());
            }

            return equals;
        }

        /// <summary>
        /// Gets the hash code for the current object.
        /// </summary>
        /// <returns>Hash code for the current object.</returns>
        public override int GetHashCode()
        {
            return base.GetHashCode();
        }

        /// <summary>
        /// Gets the hash code for the specified object.
        /// </summary>
        /// <param name="obj"><see cref="ISalesRuleCoupon"/> object.</param>
        /// <returns>Hash code for the specified object.</returns>
        /// <exception cref="ArgumentNullException"></exception>
        public virtual int GetHashCode(ISalesRuleCoupon obj)
        {
            if (obj == null)
            {
                throw new ArgumentNullException(nameof(obj));
            }
            else
            {
                return obj.GetHashCode();
            }
        }

        /// <summary>
        /// Gets the string representation of the current object.
        /// </summary>
        /// <returns>String representation of the current object.</returns>
        public override string ToString()
        {
            return String.IsNullOrWhiteSpace(Code) ? base.ToString() : Code;
        }

        /// <summary>
        /// Returns a JSON string representing the current object. This method must be inherited.
        /// </summary>
        /// <typeparam name="T">Type of object to serialize.</typeparam>
        /// <returns>JSON string.</returns>
        public override string ToJson<T>()
        {
            return this.SerializeJson(this);
        }
    }
}

